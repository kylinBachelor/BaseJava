package 设计模式.组合模式;

/**
 * 
基本定义:
组合模式组合多个对象行成树结构以表示“整体-部分”的结构层次。
组合模式对单个对象（叶子对象）和组合对象具有一致性，它将对象组织到树结构中，可以用来描述整体与部分的关系。
在使用组合模式中需要注意一点也是组合模式最关键的地方，叶子对象和组合对象实现相同的接口，这就是组合模式能够将叶子节点和对象节点进行一致处理的原因。

概括:
将整体与局部（树形结构）进行递归组合，让客户端能够以同一种的方式对其进行处理。


优点:
可以清楚的定义分层次的复杂对象，表示对象的全部或部分层次，使得增加新构件更容易
客户端调用简单，客户端可以一致的使用组合结构或其中的单个对象。
定义了包括叶子对象和容器对象的类层次结构，叶子对象可以被组合成更复杂的容器对象，而这个容器对象又可以被组合，这样不断的递归下去，可以形成复杂的树形结构。
更容易组合体内加入对象构件，客户端不必因为加入新的构件而改变原有代码。

缺点:
使设计变得更加抽象，对象业务规则如果很复杂，则实现组合模式有很大的挑战性，而且不是所有的方法都与叶子对象子类都有关联。

使用场景:
需要表示一个对象整体-部分层次，在具有整体和部分的层次结构中，希望通过一种方式忽略整体与部分的差异，可以一致对待他们。
让客户能够忽略不同对象的层次变化，客户端可以针对抽象构件编程，无须关心层次的结构细节。



模式总结:
组合模式用于将多个对象组合成树形结构以表示“整体与部分”的结构层次，组合模式对单个对象（叶子对象）和组合对象（容器对象）的使用具有一致性。
组合对象的关键在于他定义了一个抽象构建类，它即可表示叶子对象，也可以表示容器对象，客户仅仅需要针对这个抽象构建进行编程，无须知道它是叶子对象还是容器对象。都一致性对待。
组合模式虽然能够很好的处理层次结构，也使得客户端程序变的简单，但它使得设计变的更加抽象，而且也很难对容器的构建类型限制，这会导致在增加新的构建时产生一些问题。
 */

public class Test {

    public static void main(String[] args){
        GameStore gameStore = new GameStore("全部游戏");
        CS cs = new CS("CS");
        gameStore.add(cs);

        GameStore competitiveGameStore = new GameStore("MOBA竞技游戏");
        Dota dota = new Dota("Dota");
        Lol lol = new Lol("英雄联盟");
        competitiveGameStore.add(dota);
        competitiveGameStore.add(lol);
        //整体-部分
        //Game可以看成是整体（Game是抽象类）， GameStore也是整体， CS/LOL/Dota是部分（实现类是部分）
        //Game是总体的父类，只有继承了Game的gameStore才拥有"整体"的这个属性
        gameStore.add(competitiveGameStore);
       
        //展示全部游戏
        System.out.println("展示全部游戏中。。。");
        gameStore.display();
    }
}
